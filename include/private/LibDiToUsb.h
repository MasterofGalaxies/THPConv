
/*
 * DI to USB Library.
 *
 *
 * $Revision: 1.2 $
 *
 */

#ifndef __LIBDITOUSB_H__
#define __LIBDITOUSB_H__

#ifdef LIBDITOUSB_EXPORTS
#define LIBDITOUSB_API __declspec(dllexport)
#else
#define LIBDITOUSB_API __declspec(dllimport)
#endif

#ifdef __cplusplus
extern "C" {
#endif

	// DI Command buffer
	typedef BYTE DITOUSB_DI_COMMAND[12],*PDITOUSB_DI_COMMAND;

	// Error code
	typedef enum tagDITOUSB_RESULT
	{
		DITOUSB_ERROR_SUCCESS,				// 正常終了
		DITOUSB_ERROR_DEVICE_OPEN,			// デバイスがオープンできなかった
		DITOUSB_ERROR_INVALID_HANDLE,		// 不正なハンドル
		DITOUSB_ERROR_INVALID_PARAMETER,	// 不正なパラメータ
		DITOUSB_ERROR_OPERATION,			// 操作が正常に完了しなかった
	} DITOUSB_RESULT;

	// Version information.
	typedef struct _DITOUSB_VERSION
	{
		UINT	DriverVersion;		// Device driver version.
		UINT	FirmwareVersion;	// USB firmware version.
		UINT	FpgaVersion;		// FPGA verison.
	} DITOUSB_VERSION,*PDITOUSB_VERSION;

	// Endpoint descriptor.
	typedef struct _DITOUSB_ENDPOINT_DESCRIPTOR 
	{
	    UCHAR bLength;
	    UCHAR bDescriptorType;
	    UCHAR bEndpointAddress;
	    UCHAR bmAttributes;
	    USHORT wMaxPacketSize;
	    UCHAR bInterval;
	} DITOUSB_ENDPOINT_DESCRIPTOR, *PDITOUSB_ENDPOINT_DESCRIPTOR;

	// FPGA registers
	enum DITOUSB_REGISTERS
	{
		DITOUSB_DICOM00			= 0x0000,
		DITOUSB_DICOM01			= 0x0002,
		DITOUSB_DICOM02			= 0x0004,
		DITOUSB_DICOM03			= 0x0006,
		DITOUSB_DICOM04			= 0x0008,
		DITOUSB_DICOM05			= 0x000a,
		DITOUSB_DISTATUS		= 0x000c,
		DITOUSB_DICONT			= 0x000e,
		DITOUSB_DIRES_FIFO		= 0x0010,
		DITOUSB_AISTR_FIFO		= 0x0012,
		DITOUSB_AIFIFO_COUNT	= 0x0014,
		DITOUSB_USB_FIFO_LENGTH	= 0x0016,
		DITOUSB_PACKET_COUNT	= 0x0018,
		DITOUSB_FPGAVER			= 0x001e,
		DITOUSB_DIWRES_FIFO		= 0x10000000,
	};

	// DI status
	enum DITOUSB_DISTATUS_BITS
	{
		DISTATUS_WAIT	= ( 1 << 0 ),	// 0.WAIT要求有り 1.無し
		DISTATUS_BRK	= ( 1 << 1 ),	// 0.ブレーク要因有り 1.無し
		DISTATUS_GPIO3	= ( 1 << 2 ),	// 0.DI,AI遮断状態 1.通電状態
		DISTATUS_RTCEJE	= ( 1 << 4 ),	// 0.EJECT要求有り 1.無し
		DISTATUS_RESEND	= ( 1 << 5 ),	// 0.レスポンスシーケンス終了検出
		DISTATUS_RES	= ( 1 << 6 ),	// 0.リセット要因有り 1.無し
		DISTATUS_COM	= ( 1 << 7 ),	// 0.コマンド受信有り 1.無し
	};

	// DI control
	enum DITOUSB_DICONTROL_BITS
	{
		DICONT_BRKC		= ( 1 << 1 ),	// 0./BRK=LO 1.High Impedance
		DICONT_ERRC		= ( 1 << 2 ),	// 0./ERR=LO 1./ERR=HI
		DICONT_COVC		= ( 1 << 3 ),	// 0.COVER=HI 1.COVER=LO
		DICONT_EJECNT	= ( 1 << 4 ),	// 0.EJECT_SW=LO 1.High Impedance
		DICONT_INSCNT	= ( 1 << 5 ),	// INSERT_SW信号
		DICONT_DSTRDY	= ( 1 << 7 ),	// 0.DSTRB=LO
	};

	// DI response FIFO register
	enum DITOUSB_DIRRES_FIFO_BITS
	{
		DIRRES_FIFO_DI_RFIFO		= (1 << 0),	// 0.Response FIFO enable
		DIRRES_FIFO_DI_WFIFO		= (1 << 1),	// 0.Write response FIFO enable
		DIRRES_FIFO_DI_RFIFO_CLEAR	= (1 << 2),	// 0.クリア 1.通常動作
		DIRRES_FIFO_DI_WFIFO_CLEAR	= (1 << 3),	// 0.クリア 1.通常動作
		DIRRES_FIFO_DI_RFIFO_HALF	= (1 << 6),	// 0.FIFO容量の半分以上が埋まっている
		DIRRES_FIFO_DI_WFIFO_HALF	= (1 << 7),	// 0.FIFO容量の半分以上が埋まっている
	};

	// AI stream FIFO register
	enum DITOUSB_AISTR_FIFO_BITS
	{
		AISTR_FIFO_AIFIFO		= (1 << 0),	// 0.FIFO Enable
		AISTR_FIFO_CLEAR		= (1 << 2),	// 0.クリア 1.通常動作
		AISTR_FIFO_AIFIFO_HALF	= (1 << 7),	// 0.FIFO容量の半分以上が埋まっている
	};

	typedef struct tagDITOUSB_DEVICE_INFO
	{
		DWORD Size;					/* この構造体のサイズ */
		TCHAR DevicePath[260];		/* デバイスパス名 */
		DWORD Serial;				/* シリアル番号 BCD8桁 */
	} DITOUSB_DEVICE_INFO,*PDITOUSB_DEVICE_INFO;

	// callback
	typedef BOOL (CALLBACK *DITOUSB_ENUM_CALLBACK)(LPCTSTR PathName,LPVOID Param);
	typedef BOOL (CALLBACK *DITOUSB_ENUM_CALLBACK2)(PDITOUSB_DEVICE_INFO Info,LPVOID Param);

	// device handle
	typedef struct { int unused; } *DITOUSB_HANDLE;

	LIBDITOUSB_API INT WINAPI DITOUSB_EnumDevice(DITOUSB_ENUM_CALLBACK Callback,LPVOID pParam);
	LIBDITOUSB_API INT WINAPI DITOUSB_EnumDevice2(DITOUSB_ENUM_CALLBACK2 Callback,LPVOID pParam);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_Open(LPCTSTR pDevicePath,BOOL Shared,DITOUSB_HANDLE* pHandle);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_Close(DITOUSB_HANDLE Handle);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_GetLastError(DITOUSB_HANDLE Handle);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_GetWin32LastError(DITOUSB_HANDLE Handle,LPDWORD pErrorCode);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_GetDICommand(DITOUSB_HANDLE Handle,DITOUSB_DI_COMMAND Command);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_DIFifoEnable(DITOUSB_HANDLE Handle,BOOL bEnable);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_AIFifoEnable(DITOUSB_HANDLE Handle,BOOL bEnable);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_GetDIStatus(DITOUSB_HANDLE Handle,LPWORD pBuffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_SetDIStatus(DITOUSB_HANDLE Handle,WORD Value);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_GetDIControl(DITOUSB_HANDLE Handle,LPWORD pBuffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_SetDIControl(DITOUSB_HANDLE Handle,WORD Value);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_GetVersion(DITOUSB_HANDLE Handle,PDITOUSB_VERSION pVersion);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_WriteDIFifo(DITOUSB_HANDLE Handle,INT Length,LPCVOID pBuffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_WriteAIFifo(DITOUSB_HANDLE Handle,INT Length,LPCVOID pBuffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_ReadWriteResponse(DITOUSB_HANDLE Handle,INT Length,LPVOID pBuffer);
	LIBDITOUSB_API BOOL WINAPI DITOUSB_ValidDevice(DITOUSB_HANDLE Handle);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_WriteEEPROM(DITOUSB_HANDLE Handle,BYTE DeviceAddress,BOOL bWordAddress,WORD Address,WORD Length,LPCVOID Buffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_ReadEEPROM(DITOUSB_HANDLE Handle,BYTE DeviceAddress,BOOL bWordAddress,WORD Address,WORD Length,LPVOID Buffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_ReadRegister(DITOUSB_HANDLE Handle,UINT Address,INT Length,LPWORD pBuffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_WriteRegister(DITOUSB_HANDLE Handle,UINT Address,INT Length,const WORD* pBuffer);
	LIBDITOUSB_API void WINAPI DITOUSB_GetDeviceGuid(LPGUID pGuid);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_DIFifoClear(DITOUSB_HANDLE Handle);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_AIFifoClear(DITOUSB_HANDLE Handle);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_DownloadFirmware(DITOUSB_HANDLE Handle,LPCVOID pFirmware,INT Length);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_Configuration(DITOUSB_HANDLE pHandle,LPCVOID pData,INT Length);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_WriteMemory(DITOUSB_HANDLE Handle,WORD Address,WORD Length,LPCVOID Buffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_ReadMemory(DITOUSB_HANDLE Handle,WORD Address,WORD Length,LPVOID Buffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_GetAIFifoCount(DITOUSB_HANDLE Handle,LPDWORD pBuffer);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_GetSerialNumber(DITOUSB_HANDLE Handle,LPDWORD pSerial);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_BulkOut(DITOUSB_HANDLE Handle,BYTE Endpoint,DWORD Length,LPCVOID Buffer,LPDWORD pOutBytes);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_BulkIn(DITOUSB_HANDLE Handle,BYTE Endpoint,DWORD Length,LPVOID Buffer,LPDWORD pInBytes);
	LIBDITOUSB_API DITOUSB_RESULT WINAPI DITOUSB_ResetFPGA(DITOUSB_HANDLE Handle);

#ifdef __cplusplus
}	// extern "C"
#endif

#endif	// __DITOUSB_H__
