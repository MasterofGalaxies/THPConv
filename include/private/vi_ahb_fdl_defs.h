/*---------------------------------------------------------------------------*
  Project:  Revolution HD
  File:     vi_ahb_fdl_defs.h

  Copyright 2006 - 2007 Nintendo.  All rights reserved.

  These coded instructions, statements, and computer programs contain
  proprietary information of Nintendo of America Inc. and/or Nintendo
  Company Ltd., and are protected by Federal copyright law.  They may
  not be disclosed to third parties or copied or duplicated in any form,
  in whole or in part, without the prior written consent of Nintendo.

  $Log: not supported by cvs2svn $
  Revision 1.1  2007/06/16 00:13:25  carlmu
  Initial version.

  $NoKeywords: $
 *---------------------------------------------------------------------------*/
#ifndef __VI_AHB_FDL_DEFS_H__
#define __VI_AHB_FDL_DEFS_H__


#ifdef EPPC
#include <private/fdl_assert.h>
#else
#define FDL_ASSERT(c) 
#endif
/*
 *  trusted_offset value
 */
#define AHB_TRUSTED_OFFSET  0x00800000

/*
 *  memmap value
 */
#define ACR_REGS_BASE       0x0d000000

/*
 *  ACR_reg_index value
 */
#define ACRPLLVIEXT_OFFSET  0x1c8
#define ACRRSTCTRL_OFFSET   0x194
#define ACRPLLVI_OFFSET     0x1c4
#define ACRVIIOPCTRL_OFFSET	0x228
#define ACRHDCFG_OFFSET     0x02c


#define PHYS_TO_PROTECTED(a)    ((a) | AHB_TRUSTED_OFFSET)
#define PPCACR_OFFSET           (OS_BASE_UNCACHED + AHB_TRUSTED_OFFSET)
#define PPCACR                  (ACR_REGS_BASE + PPCACR_OFFSET)


#define ACRRSTCTRL_RSTB_IOP_SIZE    1
#define ACRRSTCTRL_RSTB_IOP_SHIFT   23
#define ACRRSTCTRL_RSTB_IOP_MASK    0x00800000
#define ACRRSTCTRL_GET_RSTB_IOP(ACRRSTCTRL) \
    ((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_IOP_MASK) >> ACRRSTCTRL_RSTB_IOP_SHIFT)
#define ACRRSTCTRL_SET_RSTB_IOP(ACRRSTCTRL, RSTB_IOP) { \
    FDL_ASSERT(!((RSTB_IOP) & ~((1 << ACRRSTCTRL_RSTB_IOP_SIZE)-1))); \
    ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_IOP_MASK) | (((unsigned long)(RSTB_IOP)) << ACRRSTCTRL_RSTB_IOP_SHIFT);\
}

#define ACRRSTCTRL_RSTB_VI_SIZE 1
#define ACRRSTCTRL_RSTB_VI_SHIFT    20
#define ACRRSTCTRL_RSTB_VI_MASK 0x00100000
#define ACRRSTCTRL_GET_RSTB_VI(ACRRSTCTRL) \
    ((((unsigned long)(ACRRSTCTRL)) & ACRRSTCTRL_RSTB_VI_MASK) >> ACRRSTCTRL_RSTB_VI_SHIFT)
#define ACRRSTCTRL_SET_RSTB_VI(ACRRSTCTRL, RSTB_VI) { \
    FDL_ASSERT(!((RSTB_VI) & ~((1 << ACRRSTCTRL_RSTB_VI_SIZE)-1))); \
    ACRRSTCTRL = (((unsigned long)(ACRRSTCTRL)) & ~ACRRSTCTRL_RSTB_VI_MASK) | (((unsigned long)(RSTB_VI)) << ACRRSTCTRL_RSTB_VI_SHIFT);\
}

#define ACRPLLVIEXT_VIPLL_NLCKB_SIZE    1
#define ACRPLLVIEXT_VIPLL_NLCKB_SHIFT   31
#define ACRPLLVIEXT_VIPLL_NLCKB_MASK    0x80000000
#define ACRPLLVIEXT_GET_VIPLL_NLCKB(ACRPLLVIEXT) \
    ((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_NLCKB_MASK) >> ACRPLLVIEXT_VIPLL_NLCKB_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_NLCKB(ACRPLLVIEXT, VIPLL_NLCKB) { \
    FDL_ASSERT(!((VIPLL_NLCKB) & ~((1 << ACRPLLVIEXT_VIPLL_NLCKB_SIZE)-1))); \
    ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_NLCKB_MASK) | (((unsigned long)(VIPLL_NLCKB)) << ACRPLLVIEXT_VIPLL_NLCKB_SHIFT);\
}

#define ACRPLLVIEXT_VIPLL_RSTB_SIZE 1
#define ACRPLLVIEXT_VIPLL_RSTB_SHIFT    30
#define ACRPLLVIEXT_VIPLL_RSTB_MASK 0x40000000
#define ACRPLLVIEXT_GET_VIPLL_RSTB(ACRPLLVIEXT) \
    ((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_RSTB_MASK) >> ACRPLLVIEXT_VIPLL_RSTB_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_RSTB(ACRPLLVIEXT, VIPLL_RSTB) { \
    FDL_ASSERT(!((VIPLL_RSTB) & ~((1 << ACRPLLVIEXT_VIPLL_RSTB_SIZE)-1))); \
    ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_RSTB_MASK) | (((unsigned long)(VIPLL_RSTB)) << ACRPLLVIEXT_VIPLL_RSTB_SHIFT);\
}

#define ACRPLLVIEXT_VIPLL_OUTRESET_SIZE 1
#define ACRPLLVIEXT_VIPLL_OUTRESET_SHIFT    29
#define ACRPLLVIEXT_VIPLL_OUTRESET_MASK 0x20000000
#define ACRPLLVIEXT_GET_VIPLL_OUTRESET(ACRPLLVIEXT) \
    ((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_OUTRESET_MASK) >> ACRPLLVIEXT_VIPLL_OUTRESET_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_OUTRESET(ACRPLLVIEXT, VIPLL_OUTRESET) { \
    FDL_ASSERT(!((VIPLL_OUTRESET) & ~((1 << ACRPLLVIEXT_VIPLL_OUTRESET_SIZE)-1))); \
    ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_OUTRESET_MASK) | (((unsigned long)(VIPLL_OUTRESET)) << ACRPLLVIEXT_VIPLL_OUTRESET_SHIFT);\
}

#define ACRPLLVI_VIPLL_CLKO_0_SIZE  9
#define ACRPLLVI_VIPLL_CLKO_0_SHIFT 18
#define ACRPLLVI_VIPLL_CLKO_0_MASK  0x07fc0000
#define ACRPLLVI_GET_VIPLL_CLKO_0(ACRPLLVI) \
    ((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_CLKO_0_MASK) >> ACRPLLVI_VIPLL_CLKO_0_SHIFT)
#define ACRPLLVI_SET_VIPLL_CLKO_0(ACRPLLVI, VIPLL_CLKO_0) { \
    FDL_ASSERT(!((VIPLL_CLKO_0) & ~((1 << ACRPLLVI_VIPLL_CLKO_0_SIZE)-1))); \
    ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_CLKO_0_MASK) | (((unsigned long)(VIPLL_CLKO_0)) << ACRPLLVI_VIPLL_CLKO_0_SHIFT);\
}

#define ACRPLLVI_VIPLL_CLKF_SIZE    12
#define ACRPLLVI_VIPLL_CLKF_SHIFT   6
#define ACRPLLVI_VIPLL_CLKF_MASK    0x0003ffc0
#define ACRPLLVI_GET_VIPLL_CLKF(ACRPLLVI) \
    ((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_CLKF_MASK) >> ACRPLLVI_VIPLL_CLKF_SHIFT)
#define ACRPLLVI_SET_VIPLL_CLKF(ACRPLLVI, VIPLL_CLKF) { \
    FDL_ASSERT(!((VIPLL_CLKF) & ~((1 << ACRPLLVI_VIPLL_CLKF_SIZE)-1))); \
    ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_CLKF_MASK) | (((unsigned long)(VIPLL_CLKF)) << ACRPLLVI_VIPLL_CLKF_SHIFT);\
}
#define ACRPLLVI_VIPLL_CLKR_SIZE    6
#define ACRPLLVI_VIPLL_CLKR_SHIFT   0
#define ACRPLLVI_VIPLL_CLKR_MASK    0x0000003f
#define ACRPLLVI_GET_VIPLL_CLKR(ACRPLLVI) \
    ((((unsigned long)(ACRPLLVI)) & ACRPLLVI_VIPLL_CLKR_MASK) >> ACRPLLVI_VIPLL_CLKR_SHIFT)
#define ACRPLLVI_SET_VIPLL_CLKR(ACRPLLVI, VIPLL_CLKR) { \
    FDL_ASSERT(!((VIPLL_CLKR) & ~((1 << ACRPLLVI_VIPLL_CLKR_SIZE)-1))); \
    ACRPLLVI = (((unsigned long)(ACRPLLVI)) & ~ACRPLLVI_VIPLL_CLKR_MASK) | (((unsigned long)(VIPLL_CLKR)) << ACRPLLVI_VIPLL_CLKR_SHIFT);\
}

#define ACRPLLVIEXT_VIPLL_CLKO_1_SIZE   9
#define ACRPLLVIEXT_VIPLL_CLKO_1_SHIFT  0
#define ACRPLLVIEXT_VIPLL_CLKO_1_MASK   0x000001ff
#define ACRPLLVIEXT_GET_VIPLL_CLKO_1(ACRPLLVIEXT) \
    ((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_CLKO_1_MASK) >> ACRPLLVIEXT_VIPLL_CLKO_1_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_CLKO_1(ACRPLLVIEXT, VIPLL_CLKO_1) { \
    FDL_ASSERT(!((VIPLL_CLKO_1) & ~((1 << ACRPLLVIEXT_VIPLL_CLKO_1_SIZE)-1))); \
    ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_CLKO_1_MASK) | (((unsigned long)(VIPLL_CLKO_1)) << ACRPLLVIEXT_VIPLL_CLKO_1_SHIFT);\
}

#define ACRPLLVIEXT_VIPLL_CLKO_3_SIZE   9
#define ACRPLLVIEXT_VIPLL_CLKO_3_SHIFT  18
#define ACRPLLVIEXT_VIPLL_CLKO_3_MASK   0x07fc0000
#define ACRPLLVIEXT_GET_VIPLL_CLKO_3(ACRPLLVIEXT) \
    ((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_CLKO_3_MASK) >> ACRPLLVIEXT_VIPLL_CLKO_3_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_CLKO_3(ACRPLLVIEXT, VIPLL_CLKO_3) { \
    FDL_ASSERT(!((VIPLL_CLKO_3) & ~((1 << ACRPLLVIEXT_VIPLL_CLKO_3_SIZE)-1))); \
    ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_CLKO_3_MASK) | (((unsigned long)(VIPLL_CLKO_3)) << ACRPLLVIEXT_VIPLL_CLKO_3_SHIFT);\
}

#define ACRPLLVIEXT_VIPLL_CLKO_2_SIZE   9
#define ACRPLLVIEXT_VIPLL_CLKO_2_SHIFT  9
#define ACRPLLVIEXT_VIPLL_CLKO_2_MASK   0x0003fe00
#define ACRPLLVIEXT_GET_VIPLL_CLKO_2(ACRPLLVIEXT) \
    ((((unsigned long)(ACRPLLVIEXT)) & ACRPLLVIEXT_VIPLL_CLKO_2_MASK) >> ACRPLLVIEXT_VIPLL_CLKO_2_SHIFT)
#define ACRPLLVIEXT_SET_VIPLL_CLKO_2(ACRPLLVIEXT, VIPLL_CLKO_2) { \
    FDL_ASSERT(!((VIPLL_CLKO_2) & ~((1 << ACRPLLVIEXT_VIPLL_CLKO_2_SIZE)-1))); \
    ACRPLLVIEXT = (((unsigned long)(ACRPLLVIEXT)) & ~ACRPLLVIEXT_VIPLL_CLKO_2_MASK) | (((unsigned long)(VIPLL_CLKO_2)) << ACRPLLVIEXT_VIPLL_CLKO_2_SHIFT);\
}

/*
 *  ACRVIIOPCTRL struct
 */
#define ACRVIIOPCTRL_IOP_VI_OWNER_SIZE	1
#define ACRVIIOPCTRL_IOP_VI_OWNER_SHIFT	0
#define ACRVIIOPCTRL_IOP_VI_OWNER_MASK	0x00000001
#define ACRVIIOPCTRL_GET_IOP_VI_OWNER(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_IOP_VI_OWNER_MASK) >> ACRVIIOPCTRL_IOP_VI_OWNER_SHIFT)
#define ACRVIIOPCTRL_SET_IOP_VI_OWNER(ACRVIIOPCTRL, IOP_VI_OWNER) { \
	FDL_ASSERT(!((IOP_VI_OWNER) & ~((1 << ACRVIIOPCTRL_IOP_VI_OWNER_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_IOP_VI_OWNER_MASK) | (((unsigned long)(IOP_VI_OWNER)) << ACRVIIOPCTRL_IOP_VI_OWNER_SHIFT);\
}
#define ACRVIIOPCTRL_HB_OVERRIDE_SIZE	1
#define ACRVIIOPCTRL_HB_OVERRIDE_SHIFT	1
#define ACRVIIOPCTRL_HB_OVERRIDE_MASK	0x00000002
#define ACRVIIOPCTRL_GET_HB_OVERRIDE(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_HB_OVERRIDE_MASK) >> ACRVIIOPCTRL_HB_OVERRIDE_SHIFT)
#define ACRVIIOPCTRL_SET_HB_OVERRIDE(ACRVIIOPCTRL, HB_OVERRIDE) { \
	FDL_ASSERT(!((HB_OVERRIDE) & ~((1 << ACRVIIOPCTRL_HB_OVERRIDE_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_HB_OVERRIDE_MASK) | (((unsigned long)(HB_OVERRIDE)) << ACRVIIOPCTRL_HB_OVERRIDE_SHIFT);\
}
#define ACRVIIOPCTRL_HSYNC_POL_SIZE	1
#define ACRVIIOPCTRL_HSYNC_POL_SHIFT	2
#define ACRVIIOPCTRL_HSYNC_POL_MASK	0x00000004
#define ACRVIIOPCTRL_GET_HSYNC_POL(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_HSYNC_POL_MASK) >> ACRVIIOPCTRL_HSYNC_POL_SHIFT)
#define ACRVIIOPCTRL_SET_HSYNC_POL(ACRVIIOPCTRL, HSYNC_POL) { \
	FDL_ASSERT(!((HSYNC_POL) & ~((1 << ACRVIIOPCTRL_HSYNC_POL_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_HSYNC_POL_MASK) | (((unsigned long)(HSYNC_POL)) << ACRVIIOPCTRL_HSYNC_POL_SHIFT);\
}
#define ACRVIIOPCTRL_VSYNC_POL_SIZE	1
#define ACRVIIOPCTRL_VSYNC_POL_SHIFT	3
#define ACRVIIOPCTRL_VSYNC_POL_MASK	0x00000008
#define ACRVIIOPCTRL_GET_VSYNC_POL(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_VSYNC_POL_MASK) >> ACRVIIOPCTRL_VSYNC_POL_SHIFT)
#define ACRVIIOPCTRL_SET_VSYNC_POL(ACRVIIOPCTRL, VSYNC_POL) { \
	FDL_ASSERT(!((VSYNC_POL) & ~((1 << ACRVIIOPCTRL_VSYNC_POL_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_VSYNC_POL_MASK) | (((unsigned long)(VSYNC_POL)) << ACRVIIOPCTRL_VSYNC_POL_SHIFT);\
}
#define ACRVIIOPCTRL_VICLK_POL_SIZE	1
#define ACRVIIOPCTRL_VICLK_POL_SHIFT	4
#define ACRVIIOPCTRL_VICLK_POL_MASK	0x00000010
#define ACRVIIOPCTRL_GET_VICLK_POL(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_VICLK_POL_MASK) >> ACRVIIOPCTRL_VICLK_POL_SHIFT)
#define ACRVIIOPCTRL_SET_VICLK_POL(ACRVIIOPCTRL, VICLK_POL) { \
	FDL_ASSERT(!((VICLK_POL) & ~((1 << ACRVIIOPCTRL_VICLK_POL_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_VICLK_POL_MASK) | (((unsigned long)(VICLK_POL)) << ACRVIIOPCTRL_VICLK_POL_SHIFT);\
}
#define ACRVIIOPCTRL_CB_CR_SWAP_SIZE	1
#define ACRVIIOPCTRL_CB_CR_SWAP_SHIFT	5
#define ACRVIIOPCTRL_CB_CR_SWAP_MASK	0x00000020
#define ACRVIIOPCTRL_GET_CB_CR_SWAP(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_CB_CR_SWAP_MASK) >> ACRVIIOPCTRL_CB_CR_SWAP_SHIFT)
#define ACRVIIOPCTRL_SET_CB_CR_SWAP(ACRVIIOPCTRL, CB_CR_SWAP) { \
	FDL_ASSERT(!((CB_CR_SWAP) & ~((1 << ACRVIIOPCTRL_CB_CR_SWAP_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_CB_CR_SWAP_MASK) | (((unsigned long)(CB_CR_SWAP)) << ACRVIIOPCTRL_CB_CR_SWAP_SHIFT);\
}
#define ACRVIIOPCTRL_CBCR_Y_SWAP_SIZE	1
#define ACRVIIOPCTRL_CBCR_Y_SWAP_SHIFT	6
#define ACRVIIOPCTRL_CBCR_Y_SWAP_MASK	0x00000040
#define ACRVIIOPCTRL_GET_CBCR_Y_SWAP(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_CBCR_Y_SWAP_MASK) >> ACRVIIOPCTRL_CBCR_Y_SWAP_SHIFT)
#define ACRVIIOPCTRL_SET_CBCR_Y_SWAP(ACRVIIOPCTRL, CBCR_Y_SWAP) { \
	FDL_ASSERT(!((CBCR_Y_SWAP) & ~((1 << ACRVIIOPCTRL_CBCR_Y_SWAP_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_CBCR_Y_SWAP_MASK) | (((unsigned long)(CBCR_Y_SWAP)) << ACRVIIOPCTRL_CBCR_Y_SWAP_SHIFT);\
}
#define ACRVIIOPCTRL_SPARE_SIZE	1
#define ACRVIIOPCTRL_SPARE_SHIFT	7
#define ACRVIIOPCTRL_SPARE_MASK	0x00000080
#define ACRVIIOPCTRL_GET_SPARE(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_SPARE_MASK) >> ACRVIIOPCTRL_SPARE_SHIFT)
#define ACRVIIOPCTRL_SET_SPARE(ACRVIIOPCTRL, SPARE) { \
	FDL_ASSERT(!((SPARE) & ~((1 << ACRVIIOPCTRL_SPARE_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_SPARE_MASK) | (((unsigned long)(SPARE)) << ACRVIIOPCTRL_SPARE_SHIFT);\
}
#define ACRVIIOPCTRL_VHCLK_FROM_VCCLK_SIZE	1
#define ACRVIIOPCTRL_VHCLK_FROM_VCCLK_SHIFT	8
#define ACRVIIOPCTRL_VHCLK_FROM_VCCLK_MASK	0x00000100
#define ACRVIIOPCTRL_GET_VHCLK_FROM_VCCLK(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_VHCLK_FROM_VCCLK_MASK) >> ACRVIIOPCTRL_VHCLK_FROM_VCCLK_SHIFT)
#define ACRVIIOPCTRL_SET_VHCLK_FROM_VCCLK(ACRVIIOPCTRL, VHCLK_FROM_VCCLK) { \
	FDL_ASSERT(!((VHCLK_FROM_VCCLK) & ~((1 << ACRVIIOPCTRL_VHCLK_FROM_VCCLK_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_VHCLK_FROM_VCCLK_MASK) | (((unsigned long)(VHCLK_FROM_VCCLK)) << ACRVIIOPCTRL_VHCLK_FROM_VCCLK_SHIFT);\
}
#define ACRVIIOPCTRL_SHIFT_VI_DATA_SIZE	1
#define ACRVIIOPCTRL_SHIFT_VI_DATA_SHIFT	9
#define ACRVIIOPCTRL_SHIFT_VI_DATA_MASK	0x00000200
#define ACRVIIOPCTRL_GET_SHIFT_VI_DATA(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_SHIFT_VI_DATA_MASK) >> ACRVIIOPCTRL_SHIFT_VI_DATA_SHIFT)
#define ACRVIIOPCTRL_SET_SHIFT_VI_DATA(ACRVIIOPCTRL, SHIFT_VI_DATA) { \
	FDL_ASSERT(!((SHIFT_VI_DATA) & ~((1 << ACRVIIOPCTRL_SHIFT_VI_DATA_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_SHIFT_VI_DATA_MASK) | (((unsigned long)(SHIFT_VI_DATA)) << ACRVIIOPCTRL_SHIFT_VI_DATA_SHIFT);\
}
#define ACRVIIOPCTRL_SHIFT_VSYNC_SIZE	1
#define ACRVIIOPCTRL_SHIFT_VSYNC_SHIFT	10
#define ACRVIIOPCTRL_SHIFT_VSYNC_MASK	0x00000400
#define ACRVIIOPCTRL_GET_SHIFT_VSYNC(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_SHIFT_VSYNC_MASK) >> ACRVIIOPCTRL_SHIFT_VSYNC_SHIFT)
#define ACRVIIOPCTRL_SET_SHIFT_VSYNC(ACRVIIOPCTRL, SHIFT_VSYNC) { \
	FDL_ASSERT(!((SHIFT_VSYNC) & ~((1 << ACRVIIOPCTRL_SHIFT_VSYNC_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_SHIFT_VSYNC_MASK) | (((unsigned long)(SHIFT_VSYNC)) << ACRVIIOPCTRL_SHIFT_VSYNC_SHIFT);\
}
#define ACRVIIOPCTRL_SHIFT_HSYNC_SIZE	1
#define ACRVIIOPCTRL_SHIFT_HSYNC_SHIFT	11
#define ACRVIIOPCTRL_SHIFT_HSYNC_MASK	0x00000800
#define ACRVIIOPCTRL_GET_SHIFT_HSYNC(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_SHIFT_HSYNC_MASK) >> ACRVIIOPCTRL_SHIFT_HSYNC_SHIFT)
#define ACRVIIOPCTRL_SET_SHIFT_HSYNC(ACRVIIOPCTRL, SHIFT_HSYNC) { \
	FDL_ASSERT(!((SHIFT_HSYNC) & ~((1 << ACRVIIOPCTRL_SHIFT_HSYNC_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_SHIFT_HSYNC_MASK) | (((unsigned long)(SHIFT_HSYNC)) << ACRVIIOPCTRL_SHIFT_HSYNC_SHIFT);\
}
#define ACRVIIOPCTRL_VI_HD_1080_FIX_SIZE	1
#define ACRVIIOPCTRL_VI_HD_1080_FIX_SHIFT	12
#define ACRVIIOPCTRL_VI_HD_1080_FIX_MASK	0x00001000
#define ACRVIIOPCTRL_GET_VI_HD_1080_FIX(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_VI_HD_1080_FIX_MASK) >> ACRVIIOPCTRL_VI_HD_1080_FIX_SHIFT)
#define ACRVIIOPCTRL_SET_VI_HD_1080_FIX(ACRVIIOPCTRL, VI_HD_1080_FIX) { \
	FDL_ASSERT(!((VI_HD_1080_FIX) & ~((1 << ACRVIIOPCTRL_VI_HD_1080_FIX_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_VI_HD_1080_FIX_MASK) | (((unsigned long)(VI_HD_1080_FIX)) << ACRVIIOPCTRL_VI_HD_1080_FIX_SHIFT);\
}
#define ACRVIIOPCTRL_VI_DISABLE_CLAMP_FILT_SIZE	1
#define ACRVIIOPCTRL_VI_DISABLE_CLAMP_FILT_SHIFT	13
#define ACRVIIOPCTRL_VI_DISABLE_CLAMP_FILT_MASK	0x00002000
#define ACRVIIOPCTRL_GET_VI_DISABLE_CLAMP_FILT(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_VI_DISABLE_CLAMP_FILT_MASK) >> ACRVIIOPCTRL_VI_DISABLE_CLAMP_FILT_SHIFT)
#define ACRVIIOPCTRL_SET_VI_DISABLE_CLAMP_FILT(ACRVIIOPCTRL, VI_DISABLE_CLAMP_FILT) { \
	FDL_ASSERT(!((VI_DISABLE_CLAMP_FILT) & ~((1 << ACRVIIOPCTRL_VI_DISABLE_CLAMP_FILT_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_VI_DISABLE_CLAMP_FILT_MASK) | (((unsigned long)(VI_DISABLE_CLAMP_FILT)) << ACRVIIOPCTRL_VI_DISABLE_CLAMP_FILT_SHIFT);\
}
#define ACRVIIOPCTRL_VICLK13_EN_SIZE	1
#define ACRVIIOPCTRL_VICLK13_EN_SHIFT	14
#define ACRVIIOPCTRL_VICLK13_EN_MASK	0x00004000
#define ACRVIIOPCTRL_GET_VICLK13_EN(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_VICLK13_EN_MASK) >> ACRVIIOPCTRL_VICLK13_EN_SHIFT)
#define ACRVIIOPCTRL_SET_VICLK13_EN(ACRVIIOPCTRL, VICLK13_EN) { \
	FDL_ASSERT(!((VICLK13_EN) & ~((1 << ACRVIIOPCTRL_VICLK13_EN_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_VICLK13_EN_MASK) | (((unsigned long)(VICLK13_EN)) << ACRVIIOPCTRL_VICLK13_EN_SHIFT);\
}
#define ACRVIIOPCTRL_USE_ACRVI_CCIRBLANK_SIZE	1
#define ACRVIIOPCTRL_USE_ACRVI_CCIRBLANK_SHIFT	15
#define ACRVIIOPCTRL_USE_ACRVI_CCIRBLANK_MASK	0x00008000
#define ACRVIIOPCTRL_GET_USE_ACRVI_CCIRBLANK(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_USE_ACRVI_CCIRBLANK_MASK) >> ACRVIIOPCTRL_USE_ACRVI_CCIRBLANK_SHIFT)
#define ACRVIIOPCTRL_SET_USE_ACRVI_CCIRBLANK(ACRVIIOPCTRL, USE_ACRVI_CCIRBLANK) { \
	FDL_ASSERT(!((USE_ACRVI_CCIRBLANK) & ~((1 << ACRVIIOPCTRL_USE_ACRVI_CCIRBLANK_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_USE_ACRVI_CCIRBLANK_MASK) | (((unsigned long)(USE_ACRVI_CCIRBLANK)) << ACRVIIOPCTRL_USE_ACRVI_CCIRBLANK_SHIFT);\
}
#define ACRVIIOPCTRL_ACRVI_USE_HD_LUMABLACK_SIZE	1
#define ACRVIIOPCTRL_ACRVI_USE_HD_LUMABLACK_SHIFT	16
#define ACRVIIOPCTRL_ACRVI_USE_HD_LUMABLACK_MASK	0x00010000
#define ACRVIIOPCTRL_GET_ACRVI_USE_HD_LUMABLACK(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_ACRVI_USE_HD_LUMABLACK_MASK) >> ACRVIIOPCTRL_ACRVI_USE_HD_LUMABLACK_SHIFT)
#define ACRVIIOPCTRL_SET_ACRVI_USE_HD_LUMABLACK(ACRVIIOPCTRL, ACRVI_USE_HD_LUMABLACK) { \
	FDL_ASSERT(!((ACRVI_USE_HD_LUMABLACK) & ~((1 << ACRVIIOPCTRL_ACRVI_USE_HD_LUMABLACK_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_ACRVI_USE_HD_LUMABLACK_MASK) | (((unsigned long)(ACRVI_USE_HD_LUMABLACK)) << ACRVIIOPCTRL_ACRVI_USE_HD_LUMABLACK_SHIFT);\
}
#define ACRVIIOPCTRL_ACRVI_USE_HD_START_PRE_EQ_SIZE	1
#define ACRVIIOPCTRL_ACRVI_USE_HD_START_PRE_EQ_SHIFT	17
#define ACRVIIOPCTRL_ACRVI_USE_HD_START_PRE_EQ_MASK	0x00020000
#define ACRVIIOPCTRL_GET_ACRVI_USE_HD_START_PRE_EQ(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_ACRVI_USE_HD_START_PRE_EQ_MASK) >> ACRVIIOPCTRL_ACRVI_USE_HD_START_PRE_EQ_SHIFT)
#define ACRVIIOPCTRL_SET_ACRVI_USE_HD_START_PRE_EQ(ACRVIIOPCTRL, ACRVI_USE_HD_START_PRE_EQ) { \
	FDL_ASSERT(!((ACRVI_USE_HD_START_PRE_EQ) & ~((1 << ACRVIIOPCTRL_ACRVI_USE_HD_START_PRE_EQ_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_ACRVI_USE_HD_START_PRE_EQ_MASK) | (((unsigned long)(ACRVI_USE_HD_START_PRE_EQ)) << ACRVIIOPCTRL_ACRVI_USE_HD_START_PRE_EQ_SHIFT);\
}
#define ACRVIIOPCTRL_PAD0_SIZE	14
#define ACRVIIOPCTRL_PAD0_SHIFT	18
#define ACRVIIOPCTRL_PAD0_MASK	0xfffc0000
#define ACRVIIOPCTRL_GET_PAD0(ACRVIIOPCTRL) \
	((((unsigned long)(ACRVIIOPCTRL)) & ACRVIIOPCTRL_PAD0_MASK) >> ACRVIIOPCTRL_PAD0_SHIFT)
#define ACRVIIOPCTRL_SET_PAD0(ACRVIIOPCTRL, pad0) { \
	FDL_ASSERT(!((pad0) & ~((1 << ACRVIIOPCTRL_PAD0_SIZE)-1))); \
	ACRVIIOPCTRL = (((unsigned long)(ACRVIIOPCTRL)) & ~ACRVIIOPCTRL_PAD0_MASK) | (((unsigned long)(pad0)) << ACRVIIOPCTRL_PAD0_SHIFT);\
}
#define ACRVIIOPCTRL_TOTAL_SIZE	32
#define ACRVIIOPCTRL(IOP_VI_OWNER, HB_OVERRIDE, HSYNC_POL, VSYNC_POL, VICLK_POL, CB_CR_SWAP, CBCR_Y_SWAP, SPARE, VHCLK_FROM_VCCLK, SHIFT_VI_DATA, SHIFT_VSYNC, SHIFT_HSYNC, VI_HD_1080_FIX, VI_DISABLE_CLAMP_FILT, VICLK13_EN, USE_ACRVI_CCIRBLANK, ACRVI_USE_HD_LUMABLACK, ACRVI_USE_HD_START_PRE_EQ) \
	((((unsigned long)(IOP_VI_OWNER)) << ACRVIIOPCTRL_IOP_VI_OWNER_SHIFT) | \
	 (((unsigned long)(HB_OVERRIDE)) << ACRVIIOPCTRL_HB_OVERRIDE_SHIFT) | \
	 (((unsigned long)(HSYNC_POL)) << ACRVIIOPCTRL_HSYNC_POL_SHIFT) | \
	 (((unsigned long)(VSYNC_POL)) << ACRVIIOPCTRL_VSYNC_POL_SHIFT) | \
	 (((unsigned long)(VICLK_POL)) << ACRVIIOPCTRL_VICLK_POL_SHIFT) | \
	 (((unsigned long)(CB_CR_SWAP)) << ACRVIIOPCTRL_CB_CR_SWAP_SHIFT) | \
	 (((unsigned long)(CBCR_Y_SWAP)) << ACRVIIOPCTRL_CBCR_Y_SWAP_SHIFT) | \
	 (((unsigned long)(SPARE)) << ACRVIIOPCTRL_SPARE_SHIFT) | \
	 (((unsigned long)(VHCLK_FROM_VCCLK)) << ACRVIIOPCTRL_VHCLK_FROM_VCCLK_SHIFT) | \
	 (((unsigned long)(SHIFT_VI_DATA)) << ACRVIIOPCTRL_SHIFT_VI_DATA_SHIFT) | \
	 (((unsigned long)(SHIFT_VSYNC)) << ACRVIIOPCTRL_SHIFT_VSYNC_SHIFT) | \
	 (((unsigned long)(SHIFT_HSYNC)) << ACRVIIOPCTRL_SHIFT_HSYNC_SHIFT) | \
	 (((unsigned long)(VI_HD_1080_FIX)) << ACRVIIOPCTRL_VI_HD_1080_FIX_SHIFT) | \
	 (((unsigned long)(VI_DISABLE_CLAMP_FILT)) << ACRVIIOPCTRL_VI_DISABLE_CLAMP_FILT_SHIFT) | \
	 (((unsigned long)(VICLK13_EN)) << ACRVIIOPCTRL_VICLK13_EN_SHIFT) | \
	 (((unsigned long)(USE_ACRVI_CCIRBLANK)) << ACRVIIOPCTRL_USE_ACRVI_CCIRBLANK_SHIFT) | \
	 (((unsigned long)(ACRVI_USE_HD_LUMABLACK)) << ACRVIIOPCTRL_ACRVI_USE_HD_LUMABLACK_SHIFT) | \
	 (((unsigned long)(ACRVI_USE_HD_START_PRE_EQ)) << ACRVIIOPCTRL_ACRVI_USE_HD_START_PRE_EQ_SHIFT))


#define ACRHDCFG_CONEXANT_EN_SIZE   1
#define ACRHDCFG_CONEXANT_EN_SHIFT  0
#define ACRHDCFG_CONEXANT_EN_MASK   0x00000001
#define ACRHDCFG_GET_CONEXANT_EN(ACRHDCFG) \
    ((((unsigned long)(ACRHDCFG)) & ACRHDCFG_CONEXANT_EN_MASK) >> ACRHDCFG_CONEXANT_EN_SHIFT)
#define ACRHDCFG_SET_CONEXANT_EN(ACRHDCFG, CONEXANT_EN) { \
    FDL_ASSERT(!((CONEXANT_EN) & ~((1 << ACRHDCFG_CONEXANT_EN_SIZE)-1))); \
    ACRHDCFG = (((unsigned long)(ACRHDCFG)) & ~ACRHDCFG_CONEXANT_EN_MASK) | (((unsigned long)(CONEXANT_EN)) << ACRHDCFG_CONEXANT_EN_SHIFT);\
}
#define ACRHDCFG_HD_EN_SIZE 1
#define ACRHDCFG_HD_EN_SHIFT    1
#define ACRHDCFG_HD_EN_MASK 0x00000002
#define ACRHDCFG_GET_HD_EN(ACRHDCFG) \
    ((((unsigned long)(ACRHDCFG)) & ACRHDCFG_HD_EN_MASK) >> ACRHDCFG_HD_EN_SHIFT)
#define ACRHDCFG_SET_HD_EN(ACRHDCFG, HD_EN) { \
    FDL_ASSERT(!((HD_EN) & ~((1 << ACRHDCFG_HD_EN_SIZE)-1))); \
    ACRHDCFG = (((unsigned long)(ACRHDCFG)) & ~ACRHDCFG_HD_EN_MASK) | (((unsigned long)(HD_EN)) << ACRHDCFG_HD_EN_SHIFT);\
}
#define ACRHDCFG_CFGADDR_SIZE   3
#define ACRHDCFG_CFGADDR_SHIFT  2
#define ACRHDCFG_CFGADDR_MASK   0x0000001c
#define ACRHDCFG_GET_CFGADDR(ACRHDCFG) \
    ((((unsigned long)(ACRHDCFG)) & ACRHDCFG_CFGADDR_MASK) >> ACRHDCFG_CFGADDR_SHIFT)
#define ACRHDCFG_SET_CFGADDR(ACRHDCFG, CFGADDR) { \
    FDL_ASSERT(!((CFGADDR) & ~((1 << ACRHDCFG_CFGADDR_SIZE)-1))); \
    ACRHDCFG = (((unsigned long)(ACRHDCFG)) & ~ACRHDCFG_CFGADDR_MASK) | (((unsigned long)(CFGADDR)) << ACRHDCFG_CFGADDR_SHIFT);\
}

#endif /* __FDL_AHB_FDL_DEFS_H__ */
