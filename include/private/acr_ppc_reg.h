/*---------------------------------------------------------------------------*
  Project:  FDL header for ACR registers
  File:     acr_ppc_reg.h

  Copyright 2005-2006 Nintendo.  All rights reserved.

  These coded instructions, statements, and computer programs contain
  proprietary information of Nintendo of America Inc. and/or Nintendo
  Company Ltd., and are protected by Federal copyright law.  They may
  not be disclosed to third parties or copied or duplicated in any form,
  in whole or in part, without the prior written consent of Nintendo.

  $Log: not supported by cvs2svn $
  Revision 1.4  2006/03/31 00:54:42  hirose
  Added GPIO register bitfield definitions.

  Revision 1.3  2006/03/01 08:14:10  hirose
  Added AIP DSEA address definitions.

  Revision 1.2  2006/02/28 11:12:11  hirose
  separated out non-accessible registers.

  Revision 1.1  2006/02/28 07:52:22  hirose
  Initial check in.


  $NoKeywords: $
 *---------------------------------------------------------------------------*/

#ifndef __ACR_PPC_REG_H__
#define __ACR_PPC_REG_H__

#include <revolution/types.h>

/*---------------------------------------------------------------------------*
    These are macro definitions for accessing ACR registers that are
    accessible from Broadway CPU. (Partial copy of ahb_fdl_defs.h)
 *---------------------------------------------------------------------------*/
#ifndef ACR_REGS_BASE
#define ACR_REGS_BASE   0x0d000000
#endif // ACR_REGS_BASE

#ifndef ACR_NUM_REGS
#define ACR_NUM_REGS    (0x224>>2)
#endif // ACR_NUM_REGS

// ACR registers on real Vegas HW.
#ifdef HOLLYWOOD_REV
vu32 __ACRRegs[ACR_NUM_REGS] : OS_BASE_UNCACHED + ACR_REGS_BASE;

// Inline functions for access
inline void ACRWriteReg( u32 offset, u32 val )
{
    __ACRRegs[offset>>2] = val;
}

inline u32 ACRReadReg( u32 offset )
{
    return __ACRRegs[offset>>2];
}
#endif // HOLLYWOOD_REV


/*---------------------------------------------------------------------------*/
#ifndef __FDL_AHB_FDL_DEFS_H__      // in case original header was included.


/*
 *  memmap value
 */
#define AIP_DI_BASE 0x0d006000
#define AIP_SI_BASE 0x0d006400
#define AIP_EXI_BASE    0x0d006800
#define AIP_AI_BASE 0x0d006c00


/*
 *  ACR_reg_index value
 */
#define IPCP2SMSG_OFFSET    0x000
#define IPCPPCCTRL_OFFSET   0x004

#define ACRVI1CFG_OFFSET    0x018
#define ACRVIDIM_OFFSET 0x01c
#define ACRDIMCTRL_OFFSET   0x020
#define ACRVISOLIDCLR_OFFSET    0x024
#define ACRSIFRMCNT_OFFSET  0x028
#define ACRHDCFG_OFFSET 0x02c
#define ACRPPCINTSTS_OFFSET 0x030
#define ACRPPCINTEN_OFFSET  0x034

#define ACRDBGINTSTS_OFFSET 0x058
#define ACRDBGINTEN_OFFSET  0x05c

#define GPIPPCOUT_OFFSET    0x0c0
#define GPIPPCOE_OFFSET 0x0c4
#define GPIPPCIN_OFFSET 0x0c8
#define GPIPPCINTPOL_OFFSET 0x0cc
#define GPIPPCINTSTS_OFFSET 0x0d0
#define GPIPPCINTEN_OFFSET  0x0d4
#define GPIPPCSTRAPS_OFFSET 0x0d8

#define ACRSICLKDIV_OFFSET  0x204


/*
 *  Non-accessible registers
 */

#ifdef DEBUG_BOOT
#define IPCS2PMSG_OFFSET    0x008
#define IPCIOPCTRL_OFFSET   0x00c
#define ACRTMRCNT_OFFSET    0x010
#define ACRTMRCMP_OFFSET    0x014

#define ACRIOPINTSTS_OFFSET 0x038
#define ACRIOPIRQINTEN_OFFSET   0x03c
#define ACRIOPFIQINTEN_OFFSET   0x040
#define ACRIOPINTPPC_OFFSET 0x044
#define ACRWDGINTSTS_OFFSET 0x048
#define ACRWDGCFG_OFFSET    0x04c
#define ACRDMAADRINTSTS_OFFSET  0x050
#define ACRCPUADRINTSTS_OFFSET  0x054

#define ACRSRNPROT_OFFSET   0x060
#define ACRBUSPROT_OFFSET   0x064
#define AIPPROT_OFFSET  0x070
#define AIPIOCTRL_OFFSET    0x074
#define ACRUSBDBG0_OFFSET   0x080
#define ACRUSBDBG1_OFFSET   0x084
#define ACRUSBFRCRST_OFFSET 0x088
#define ACRUSBIOTEST_OFFSET 0x08c
#define ELA_REG_ADDR_OFFSET 0x090
#define ELA_REG_DATA_OFFSET 0x094
#define ACRMEMTSTN_OFFSET   0x098
#define ACRMEMTSTP_OFFSET   0x09c

#define GPIIOPEN_OFFSET 0x0dc
#define GPIIOPOUT_OFFSET    0x0e0
#define GPIIOPOE_OFFSET 0x0e4
#define GPIIOPIN_OFFSET 0x0e8
#define GPIIOPINTPOL_OFFSET 0x0ec
#define GPIIOPINTSTS_OFFSET 0x0f0
#define GPIIOPINTEN_OFFSET  0x0f4
#define GPIIOPSTRAPS_OFFSET 0x0f8
#define GPIIOPPPCOWNER_OFFSET   0x0fc
#define ACRARBCFGM0_OFFSET  0x100
#define ACRARBCFGM1_OFFSET  0x104
#define ACRARBCFGM2_OFFSET  0x108
#define ACRARBCFGM3_OFFSET  0x10c
#define ACRARBCFGM4_OFFSET  0x110
#define ACRARBCFGM5_OFFSET  0x114
#define ACRARBCFGM6_OFFSET  0x118
#define ACRARBCFGM7_OFFSET  0x11c
#define ACRARBCFGM8_OFFSET  0x120
#define ACRARBCFGM9_OFFSET  0x124
#define ACRARBCFGMC_OFFSET  0x130
#define ACRARBCFGMD_OFFSET  0x134
#define ACRARBCFGME_OFFSET  0x138
#define ACRARBCFGMF_OFFSET  0x13c
#define ACRARBCFGCPU_OFFSET 0x140
#define ACRARBCFGDMA_OFFSET 0x144
#define ACRARBPCNTCFG_OFFSET    0x148
#define ACRARBPCNTSTS_OFFSET    0x14c
#define ACRSPARE2_OFFSET    0x170
#define ACRSPARE3_OFFSET    0x174
#define ACRCOMPAT_OFFSET    0x180
#define ACRRSTAHB_OFFSET    0x184
#define ACRSPARE0_OFFSET    0x188
#define ACRSPARE1_OFFSET    0x18c
#define ACRSYSCTRL_OFFSET   0x190
#define ACRRSTCTRL_OFFSET   0x194
#define ACRCLKGATE_OFFSET   0x198
#define ACRPLLDR_OFFSET 0x19c
#define ACRPLLSYS_OFFSET    0x1b0
#define ACRPLLSYSEXT_OFFSET 0x1b4
#define ACRPLLDSK_OFFSET    0x1b8
#define ACRPLLDDR_OFFSET    0x1bc
#define ACRPLLDDREXT_OFFSET 0x1c0
#define ACRPLLVI_OFFSET 0x1c4
#define ACRPLLVIEXT_OFFSET  0x1c8
#define ACRPLLAI_OFFSET 0x1cc
#define ACRPLLAIEXT_OFFSET  0x1d0
#define ACRPLLUSB_OFFSET    0x1d4
#define ACRPLLUSBEXT_OFFSET 0x1d8
#define ACRIOPWRCTRL_OFFSET 0x1dc
#define ACRIOSTRCTRL0_OFFSET    0x1e0
#define ACRIOSTRCTRL1_OFFSET    0x1e4
#define ACRCLKSTRCTRL_OFFSET    0x1e8
#define ACREFUSEADDR_OFFSET 0x1ec
#define ACREFUSEDATA_OFFSET 0x1f0
#define ACRDBGCLK_OFFSET    0x1f4
#define ACROBSCLKOCTRL_OFFSET   0x1f8
#define ACRDBGCLKICTRL_OFFSET   0x1fc
#define ACRDBGPORT_OFFSET   0x200

#define ACRSICTRL_OFFSET    0x208
#define ACRSIDATA_OFFSET    0x20c
#define ACRSIINT_OFFSET 0x210
#define ACRCHIPREVID_OFFSET 0x214
#define ACRVICFGDATA_OFFSET 0x220
#endif // DEBUG_BOOT


/*
 *  GPIO register (PPC accessible)
 */
#define GPIO_LED_SLOT_MASK          0x00000020
#define GPIO_LED_SLOT_SHIFT         5
#define GPIO_VI1_RESET_MASK         0x00000040
#define GPIO_VI1_RESET_SHIFT        6
#define GPIO_PAD_DPD_MASK           0x00000100
#define GPIO_PAD_DPD_SHIFT          8
#define GPIO_VI0_CFGCLK_MASK        0x00004000
#define GPIO_VI0_CFGCLK_SHIFT       14
#define GPIO_VI0_CFGD_MASK          0x00008000
#define GPIO_VI0_CFGD_SHIFT         15


/*
 *  ACRINTSTS struct
 */
#define ACRINTSTS_TMRINT_SIZE   1
#define ACRINTSTS_TMRINT_SHIFT  0
#define ACRINTSTS_TMRINT_MASK   0x00000001
#define ACRINTSTS_GET_TMRINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_TMRINT_MASK) >> ACRINTSTS_TMRINT_SHIFT)
#define ACRINTSTS_SET_TMRINT(ACRINTSTS, TMRINT) { \
    FDL_ASSERT(!((TMRINT) & ~((1 << ACRINTSTS_TMRINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_TMRINT_MASK) | (((unsigned long)(TMRINT)) << ACRINTSTS_TMRINT_SHIFT);\
}
#define ACRINTSTS_FLAINT_SIZE   1
#define ACRINTSTS_FLAINT_SHIFT  1
#define ACRINTSTS_FLAINT_MASK   0x00000002
#define ACRINTSTS_GET_FLAINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_FLAINT_MASK) >> ACRINTSTS_FLAINT_SHIFT)
#define ACRINTSTS_SET_FLAINT(ACRINTSTS, FLAINT) { \
    FDL_ASSERT(!((FLAINT) & ~((1 << ACRINTSTS_FLAINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_FLAINT_MASK) | (((unsigned long)(FLAINT)) << ACRINTSTS_FLAINT_SHIFT);\
}
#define ACRINTSTS_AESINT_SIZE   1
#define ACRINTSTS_AESINT_SHIFT  2
#define ACRINTSTS_AESINT_MASK   0x00000004
#define ACRINTSTS_GET_AESINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_AESINT_MASK) >> ACRINTSTS_AESINT_SHIFT)
#define ACRINTSTS_SET_AESINT(ACRINTSTS, AESINT) { \
    FDL_ASSERT(!((AESINT) & ~((1 << ACRINTSTS_AESINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_AESINT_MASK) | (((unsigned long)(AESINT)) << ACRINTSTS_AESINT_SHIFT);\
}
#define ACRINTSTS_SHAINT_SIZE   1
#define ACRINTSTS_SHAINT_SHIFT  3
#define ACRINTSTS_SHAINT_MASK   0x00000008
#define ACRINTSTS_GET_SHAINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SHAINT_MASK) >> ACRINTSTS_SHAINT_SHIFT)
#define ACRINTSTS_SET_SHAINT(ACRINTSTS, SHAINT) { \
    FDL_ASSERT(!((SHAINT) & ~((1 << ACRINTSTS_SHAINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SHAINT_MASK) | (((unsigned long)(SHAINT)) << ACRINTSTS_SHAINT_SHIFT);\
}
#define ACRINTSTS_EHCINT_SIZE   1
#define ACRINTSTS_EHCINT_SHIFT  4
#define ACRINTSTS_EHCINT_MASK   0x00000010
#define ACRINTSTS_GET_EHCINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_EHCINT_MASK) >> ACRINTSTS_EHCINT_SHIFT)
#define ACRINTSTS_SET_EHCINT(ACRINTSTS, EHCINT) { \
    FDL_ASSERT(!((EHCINT) & ~((1 << ACRINTSTS_EHCINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_EHCINT_MASK) | (((unsigned long)(EHCINT)) << ACRINTSTS_EHCINT_SHIFT);\
}
#define ACRINTSTS_OH0INT_SIZE   1
#define ACRINTSTS_OH0INT_SHIFT  5
#define ACRINTSTS_OH0INT_MASK   0x00000020
#define ACRINTSTS_GET_OH0INT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_OH0INT_MASK) >> ACRINTSTS_OH0INT_SHIFT)
#define ACRINTSTS_SET_OH0INT(ACRINTSTS, OH0INT) { \
    FDL_ASSERT(!((OH0INT) & ~((1 << ACRINTSTS_OH0INT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_OH0INT_MASK) | (((unsigned long)(OH0INT)) << ACRINTSTS_OH0INT_SHIFT);\
}
#define ACRINTSTS_OH1INT_SIZE   1
#define ACRINTSTS_OH1INT_SHIFT  6
#define ACRINTSTS_OH1INT_MASK   0x00000040
#define ACRINTSTS_GET_OH1INT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_OH1INT_MASK) >> ACRINTSTS_OH1INT_SHIFT)
#define ACRINTSTS_SET_OH1INT(ACRINTSTS, OH1INT) { \
    FDL_ASSERT(!((OH1INT) & ~((1 << ACRINTSTS_OH1INT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_OH1INT_MASK) | (((unsigned long)(OH1INT)) << ACRINTSTS_OH1INT_SHIFT);\
}
#define ACRINTSTS_SD0INT_SIZE   1
#define ACRINTSTS_SD0INT_SHIFT  7
#define ACRINTSTS_SD0INT_MASK   0x00000080
#define ACRINTSTS_GET_SD0INT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SD0INT_MASK) >> ACRINTSTS_SD0INT_SHIFT)
#define ACRINTSTS_SET_SD0INT(ACRINTSTS, SD0INT) { \
    FDL_ASSERT(!((SD0INT) & ~((1 << ACRINTSTS_SD0INT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SD0INT_MASK) | (((unsigned long)(SD0INT)) << ACRINTSTS_SD0INT_SHIFT);\
}
#define ACRINTSTS_SD1INT_SIZE   1
#define ACRINTSTS_SD1INT_SHIFT  8
#define ACRINTSTS_SD1INT_MASK   0x00000100
#define ACRINTSTS_GET_SD1INT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SD1INT_MASK) >> ACRINTSTS_SD1INT_SHIFT)
#define ACRINTSTS_SET_SD1INT(ACRINTSTS, SD1INT) { \
    FDL_ASSERT(!((SD1INT) & ~((1 << ACRINTSTS_SD1INT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SD1INT_MASK) | (((unsigned long)(SD1INT)) << ACRINTSTS_SD1INT_SHIFT);\
}
#define ACRINTSTS_BFMINT_SIZE   1
#define ACRINTSTS_BFMINT_SHIFT  9
#define ACRINTSTS_BFMINT_MASK   0x00000200
#define ACRINTSTS_GET_BFMINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_BFMINT_MASK) >> ACRINTSTS_BFMINT_SHIFT)
#define ACRINTSTS_SET_BFMINT(ACRINTSTS, BFMINT) { \
    FDL_ASSERT(!((BFMINT) & ~((1 << ACRINTSTS_BFMINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_BFMINT_MASK) | (((unsigned long)(BFMINT)) << ACRINTSTS_BFMINT_SHIFT);\
}
#define ACRINTSTS_GPIPPCINT_SIZE    1
#define ACRINTSTS_GPIPPCINT_SHIFT   10
#define ACRINTSTS_GPIPPCINT_MASK    0x00000400
#define ACRINTSTS_GET_GPIPPCINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_GPIPPCINT_MASK) >> ACRINTSTS_GPIPPCINT_SHIFT)
#define ACRINTSTS_SET_GPIPPCINT(ACRINTSTS, GPIPPCINT) { \
    FDL_ASSERT(!((GPIPPCINT) & ~((1 << ACRINTSTS_GPIPPCINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_GPIPPCINT_MASK) | (((unsigned long)(GPIPPCINT)) << ACRINTSTS_GPIPPCINT_SHIFT);\
}
#define ACRINTSTS_GPIIOPINT_SIZE    1
#define ACRINTSTS_GPIIOPINT_SHIFT   11
#define ACRINTSTS_GPIIOPINT_MASK    0x00000800
#define ACRINTSTS_GET_GPIIOPINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_GPIIOPINT_MASK) >> ACRINTSTS_GPIIOPINT_SHIFT)
#define ACRINTSTS_SET_GPIIOPINT(ACRINTSTS, GPIIOPINT) { \
    FDL_ASSERT(!((GPIIOPINT) & ~((1 << ACRINTSTS_GPIIOPINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_GPIIOPINT_MASK) | (((unsigned long)(GPIIOPINT)) << ACRINTSTS_GPIIOPINT_SHIFT);\
}
#define ACRINTSTS_AHBDBGINT_SIZE    1
#define ACRINTSTS_AHBDBGINT_SHIFT   12
#define ACRINTSTS_AHBDBGINT_MASK    0x00001000
#define ACRINTSTS_GET_AHBDBGINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_AHBDBGINT_MASK) >> ACRINTSTS_AHBDBGINT_SHIFT)
#define ACRINTSTS_SET_AHBDBGINT(ACRINTSTS, AHBDBGINT) { \
    FDL_ASSERT(!((AHBDBGINT) & ~((1 << ACRINTSTS_AHBDBGINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_AHBDBGINT_MASK) | (((unsigned long)(AHBDBGINT)) << ACRINTSTS_AHBDBGINT_SHIFT);\
}
#define ACRINTSTS_VIPIWRINT_SIZE    1
#define ACRINTSTS_VIPIWRINT_SHIFT   13
#define ACRINTSTS_VIPIWRINT_MASK    0x00002000
#define ACRINTSTS_GET_VIPIWRINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_VIPIWRINT_MASK) >> ACRINTSTS_VIPIWRINT_SHIFT)
#define ACRINTSTS_SET_VIPIWRINT(ACRINTSTS, VIPIWRINT) { \
    FDL_ASSERT(!((VIPIWRINT) & ~((1 << ACRINTSTS_VIPIWRINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_VIPIWRINT_MASK) | (((unsigned long)(VIPIWRINT)) << ACRINTSTS_VIPIWRINT_SHIFT);\
}
#define ACRINTSTS_SIEMUINT_SIZE 1
#define ACRINTSTS_SIEMUINT_SHIFT    14
#define ACRINTSTS_SIEMUINT_MASK 0x00004000
#define ACRINTSTS_GET_SIEMUINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SIEMUINT_MASK) >> ACRINTSTS_SIEMUINT_SHIFT)
#define ACRINTSTS_SET_SIEMUINT(ACRINTSTS, SIEMUINT) { \
    FDL_ASSERT(!((SIEMUINT) & ~((1 << ACRINTSTS_SIEMUINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SIEMUINT_MASK) | (((unsigned long)(SIEMUINT)) << ACRINTSTS_SIEMUINT_SHIFT);\
}
#define ACRINTSTS_SYSRSTBINT_SIZE   1
#define ACRINTSTS_SYSRSTBINT_SHIFT  15
#define ACRINTSTS_SYSRSTBINT_MASK   0x00008000
#define ACRINTSTS_GET_SYSRSTBINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SYSRSTBINT_MASK) >> ACRINTSTS_SYSRSTBINT_SHIFT)
#define ACRINTSTS_SET_SYSRSTBINT(ACRINTSTS, SYSRSTBINT) { \
    FDL_ASSERT(!((SYSRSTBINT) & ~((1 << ACRINTSTS_SYSRSTBINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SYSRSTBINT_MASK) | (((unsigned long)(SYSRSTBINT)) << ACRINTSTS_SYSRSTBINT_SHIFT);\
}
#define ACRINTSTS_VIVSYNCINT_SIZE   1
#define ACRINTSTS_VIVSYNCINT_SHIFT  16
#define ACRINTSTS_VIVSYNCINT_MASK   0x00010000
#define ACRINTSTS_GET_VIVSYNCINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_VIVSYNCINT_MASK) >> ACRINTSTS_VIVSYNCINT_SHIFT)
#define ACRINTSTS_SET_VIVSYNCINT(ACRINTSTS, VIVSYNCINT) { \
    FDL_ASSERT(!((VIVSYNCINT) & ~((1 << ACRINTSTS_VIVSYNCINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_VIVSYNCINT_MASK) | (((unsigned long)(VIVSYNCINT)) << ACRINTSTS_VIVSYNCINT_SHIFT);\
}
#define ACRINTSTS_RSWINT_SIZE   1
#define ACRINTSTS_RSWINT_SHIFT  17
#define ACRINTSTS_RSWINT_MASK   0x00020000
#define ACRINTSTS_GET_RSWINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_RSWINT_MASK) >> ACRINTSTS_RSWINT_SHIFT)
#define ACRINTSTS_SET_RSWINT(ACRINTSTS, RSWINT) { \
    FDL_ASSERT(!((RSWINT) & ~((1 << ACRINTSTS_RSWINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_RSWINT_MASK) | (((unsigned long)(RSWINT)) << ACRINTSTS_RSWINT_SHIFT);\
}
#define ACRINTSTS_DIINT_SIZE    1
#define ACRINTSTS_DIINT_SHIFT   18
#define ACRINTSTS_DIINT_MASK    0x00040000
#define ACRINTSTS_GET_DIINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_DIINT_MASK) >> ACRINTSTS_DIINT_SHIFT)
#define ACRINTSTS_SET_DIINT(ACRINTSTS, DIINT) { \
    FDL_ASSERT(!((DIINT) & ~((1 << ACRINTSTS_DIINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_DIINT_MASK) | (((unsigned long)(DIINT)) << ACRINTSTS_DIINT_SHIFT);\
}
#define ACRINTSTS_SIINT_SIZE    1
#define ACRINTSTS_SIINT_SHIFT   19
#define ACRINTSTS_SIINT_MASK    0x00080000
#define ACRINTSTS_GET_SIINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SIINT_MASK) >> ACRINTSTS_SIINT_SHIFT)
#define ACRINTSTS_SET_SIINT(ACRINTSTS, SIINT) { \
    FDL_ASSERT(!((SIINT) & ~((1 << ACRINTSTS_SIINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SIINT_MASK) | (((unsigned long)(SIINT)) << ACRINTSTS_SIINT_SHIFT);\
}
#define ACRINTSTS_EXIINT_SIZE   1
#define ACRINTSTS_EXIINT_SHIFT  20
#define ACRINTSTS_EXIINT_MASK   0x00100000
#define ACRINTSTS_GET_EXIINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_EXIINT_MASK) >> ACRINTSTS_EXIINT_SHIFT)
#define ACRINTSTS_SET_EXIINT(ACRINTSTS, EXIINT) { \
    FDL_ASSERT(!((EXIINT) & ~((1 << ACRINTSTS_EXIINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_EXIINT_MASK) | (((unsigned long)(EXIINT)) << ACRINTSTS_EXIINT_SHIFT);\
}
#define ACRINTSTS_AIINT_SIZE    1
#define ACRINTSTS_AIINT_SHIFT   21
#define ACRINTSTS_AIINT_MASK    0x00200000
#define ACRINTSTS_GET_AIINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_AIINT_MASK) >> ACRINTSTS_AIINT_SHIFT)
#define ACRINTSTS_SET_AIINT(ACRINTSTS, AIINT) { \
    FDL_ASSERT(!((AIINT) & ~((1 << ACRINTSTS_AIINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_AIINT_MASK) | (((unsigned long)(AIINT)) << ACRINTSTS_AIINT_SHIFT);\
}
#define ACRINTSTS_DSPINT_SIZE   1
#define ACRINTSTS_DSPINT_SHIFT  22
#define ACRINTSTS_DSPINT_MASK   0x00400000
#define ACRINTSTS_GET_DSPINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_DSPINT_MASK) >> ACRINTSTS_DSPINT_SHIFT)
#define ACRINTSTS_SET_DSPINT(ACRINTSTS, DSPINT) { \
    FDL_ASSERT(!((DSPINT) & ~((1 << ACRINTSTS_DSPINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_DSPINT_MASK) | (((unsigned long)(DSPINT)) << ACRINTSTS_DSPINT_SHIFT);\
}
#define ACRINTSTS_MEMINT_SIZE   1
#define ACRINTSTS_MEMINT_SHIFT  23
#define ACRINTSTS_MEMINT_MASK   0x00800000
#define ACRINTSTS_GET_MEMINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_MEMINT_MASK) >> ACRINTSTS_MEMINT_SHIFT)
#define ACRINTSTS_SET_MEMINT(ACRINTSTS, MEMINT) { \
    FDL_ASSERT(!((MEMINT) & ~((1 << ACRINTSTS_MEMINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_MEMINT_MASK) | (((unsigned long)(MEMINT)) << ACRINTSTS_MEMINT_SHIFT);\
}
#define ACRINTSTS_VIINT_SIZE    1
#define ACRINTSTS_VIINT_SHIFT   24
#define ACRINTSTS_VIINT_MASK    0x01000000
#define ACRINTSTS_GET_VIINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_VIINT_MASK) >> ACRINTSTS_VIINT_SHIFT)
#define ACRINTSTS_SET_VIINT(ACRINTSTS, VIINT) { \
    FDL_ASSERT(!((VIINT) & ~((1 << ACRINTSTS_VIINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_VIINT_MASK) | (((unsigned long)(VIINT)) << ACRINTSTS_VIINT_SHIFT);\
}
#define ACRINTSTS_PEINT0_SIZE   1
#define ACRINTSTS_PEINT0_SHIFT  25
#define ACRINTSTS_PEINT0_MASK   0x02000000
#define ACRINTSTS_GET_PEINT0(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_PEINT0_MASK) >> ACRINTSTS_PEINT0_SHIFT)
#define ACRINTSTS_SET_PEINT0(ACRINTSTS, PEINT0) { \
    FDL_ASSERT(!((PEINT0) & ~((1 << ACRINTSTS_PEINT0_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_PEINT0_MASK) | (((unsigned long)(PEINT0)) << ACRINTSTS_PEINT0_SHIFT);\
}
#define ACRINTSTS_PEINT1_SIZE   1
#define ACRINTSTS_PEINT1_SHIFT  26
#define ACRINTSTS_PEINT1_MASK   0x04000000
#define ACRINTSTS_GET_PEINT1(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_PEINT1_MASK) >> ACRINTSTS_PEINT1_SHIFT)
#define ACRINTSTS_SET_PEINT1(ACRINTSTS, PEINT1) { \
    FDL_ASSERT(!((PEINT1) & ~((1 << ACRINTSTS_PEINT1_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_PEINT1_MASK) | (((unsigned long)(PEINT1)) << ACRINTSTS_PEINT1_SHIFT);\
}
#define ACRINTSTS_CPINT_SIZE    1
#define ACRINTSTS_CPINT_SHIFT   27
#define ACRINTSTS_CPINT_MASK    0x08000000
#define ACRINTSTS_GET_CPINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_CPINT_MASK) >> ACRINTSTS_CPINT_SHIFT)
#define ACRINTSTS_SET_CPINT(ACRINTSTS, CPINT) { \
    FDL_ASSERT(!((CPINT) & ~((1 << ACRINTSTS_CPINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_CPINT_MASK) | (((unsigned long)(CPINT)) << ACRINTSTS_CPINT_SHIFT);\
}
#define ACRINTSTS_DBGINT_SIZE   1
#define ACRINTSTS_DBGINT_SHIFT  28
#define ACRINTSTS_DBGINT_MASK   0x10000000
#define ACRINTSTS_GET_DBGINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_DBGINT_MASK) >> ACRINTSTS_DBGINT_SHIFT)
#define ACRINTSTS_SET_DBGINT(ACRINTSTS, DBGINT) { \
    FDL_ASSERT(!((DBGINT) & ~((1 << ACRINTSTS_DBGINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_DBGINT_MASK) | (((unsigned long)(DBGINT)) << ACRINTSTS_DBGINT_SHIFT);\
}
#define ACRINTSTS_SDINT_SIZE    1
#define ACRINTSTS_SDINT_SHIFT   29
#define ACRINTSTS_SDINT_MASK    0x20000000
#define ACRINTSTS_GET_SDINT(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_SDINT_MASK) >> ACRINTSTS_SDINT_SHIFT)
#define ACRINTSTS_SET_SDINT(ACRINTSTS, SDINT) { \
    FDL_ASSERT(!((SDINT) & ~((1 << ACRINTSTS_SDINT_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_SDINT_MASK) | (((unsigned long)(SDINT)) << ACRINTSTS_SDINT_SHIFT);\
}
#define ACRINTSTS_ACRIPCPPC_SIZE    1
#define ACRINTSTS_ACRIPCPPC_SHIFT   30
#define ACRINTSTS_ACRIPCPPC_MASK    0x40000000
#define ACRINTSTS_GET_ACRIPCPPC(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_ACRIPCPPC_MASK) >> ACRINTSTS_ACRIPCPPC_SHIFT)
#define ACRINTSTS_SET_ACRIPCPPC(ACRINTSTS, ACRIPCPPC) { \
    FDL_ASSERT(!((ACRIPCPPC) & ~((1 << ACRINTSTS_ACRIPCPPC_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_ACRIPCPPC_MASK) | (((unsigned long)(ACRIPCPPC)) << ACRINTSTS_ACRIPCPPC_SHIFT);\
}
#define ACRINTSTS_ACRIPCIOP_SIZE    1
#define ACRINTSTS_ACRIPCIOP_SHIFT   31
#define ACRINTSTS_ACRIPCIOP_MASK    0x80000000
#define ACRINTSTS_GET_ACRIPCIOP(ACRINTSTS) \
    ((((unsigned long)(ACRINTSTS)) & ACRINTSTS_ACRIPCIOP_MASK) >> ACRINTSTS_ACRIPCIOP_SHIFT)
#define ACRINTSTS_SET_ACRIPCIOP(ACRINTSTS, ACRIPCIOP) { \
    FDL_ASSERT(!((ACRIPCIOP) & ~((1 << ACRINTSTS_ACRIPCIOP_SIZE)-1))); \
    ACRINTSTS = (((unsigned long)(ACRINTSTS)) & ~ACRINTSTS_ACRIPCIOP_MASK) | (((unsigned long)(ACRIPCIOP)) << ACRINTSTS_ACRIPCIOP_SHIFT);\
}
#define ACRINTSTS_TOTAL_SIZE    32
#define ACRINTSTS(TMRINT, FLAINT, AESINT, SHAINT, EHCINT, OH0INT, OH1INT, SD0INT, SD1INT, BFMINT, GPIPPCINT, GPIIOPINT, AHBDBGINT, VIPIWRINT, SIEMUINT, SYSRSTBINT, VIVSYNCINT, RSWINT, DIINT, SIINT, EXIINT, AIINT, DSPINT, MEMINT, VIINT, PEINT0, PEINT1, CPINT, DBGINT, SDINT, ACRIPCPPC, ACRIPCIOP) \
    ((((unsigned long)(TMRINT)) << ACRINTSTS_TMRINT_SHIFT) | \
     (((unsigned long)(FLAINT)) << ACRINTSTS_FLAINT_SHIFT) | \
     (((unsigned long)(AESINT)) << ACRINTSTS_AESINT_SHIFT) | \
     (((unsigned long)(SHAINT)) << ACRINTSTS_SHAINT_SHIFT) | \
     (((unsigned long)(EHCINT)) << ACRINTSTS_EHCINT_SHIFT) | \
     (((unsigned long)(OH0INT)) << ACRINTSTS_OH0INT_SHIFT) | \
     (((unsigned long)(OH1INT)) << ACRINTSTS_OH1INT_SHIFT) | \
     (((unsigned long)(SD0INT)) << ACRINTSTS_SD0INT_SHIFT) | \
     (((unsigned long)(SD1INT)) << ACRINTSTS_SD1INT_SHIFT) | \
     (((unsigned long)(BFMINT)) << ACRINTSTS_BFMINT_SHIFT) | \
     (((unsigned long)(GPIPPCINT)) << ACRINTSTS_GPIPPCINT_SHIFT) | \
     (((unsigned long)(GPIIOPINT)) << ACRINTSTS_GPIIOPINT_SHIFT) | \
     (((unsigned long)(AHBDBGINT)) << ACRINTSTS_AHBDBGINT_SHIFT) | \
     (((unsigned long)(VIPIWRINT)) << ACRINTSTS_VIPIWRINT_SHIFT) | \
     (((unsigned long)(SIEMUINT)) << ACRINTSTS_SIEMUINT_SHIFT) | \
     (((unsigned long)(SYSRSTBINT)) << ACRINTSTS_SYSRSTBINT_SHIFT) | \
     (((unsigned long)(VIVSYNCINT)) << ACRINTSTS_VIVSYNCINT_SHIFT) | \
     (((unsigned long)(RSWINT)) << ACRINTSTS_RSWINT_SHIFT) | \
     (((unsigned long)(DIINT)) << ACRINTSTS_DIINT_SHIFT) | \
     (((unsigned long)(SIINT)) << ACRINTSTS_SIINT_SHIFT) | \
     (((unsigned long)(EXIINT)) << ACRINTSTS_EXIINT_SHIFT) | \
     (((unsigned long)(AIINT)) << ACRINTSTS_AIINT_SHIFT) | \
     (((unsigned long)(DSPINT)) << ACRINTSTS_DSPINT_SHIFT) | \
     (((unsigned long)(MEMINT)) << ACRINTSTS_MEMINT_SHIFT) | \
     (((unsigned long)(VIINT)) << ACRINTSTS_VIINT_SHIFT) | \
     (((unsigned long)(PEINT0)) << ACRINTSTS_PEINT0_SHIFT) | \
     (((unsigned long)(PEINT1)) << ACRINTSTS_PEINT1_SHIFT) | \
     (((unsigned long)(CPINT)) << ACRINTSTS_CPINT_SHIFT) | \
     (((unsigned long)(DBGINT)) << ACRINTSTS_DBGINT_SHIFT) | \
     (((unsigned long)(SDINT)) << ACRINTSTS_SDINT_SHIFT) | \
     (((unsigned long)(ACRIPCPPC)) << ACRINTSTS_ACRIPCPPC_SHIFT) | \
     (((unsigned long)(ACRIPCIOP)) << ACRINTSTS_ACRIPCIOP_SHIFT))


/*
 *  ACRVIDIM struct
 */
#define ACRVIDIM_CHROMA_SHFT_SIZE   3
#define ACRVIDIM_CHROMA_SHFT_SHIFT  0
#define ACRVIDIM_CHROMA_SHFT_MASK   0x00000007
#define ACRVIDIM_GET_CHROMA_SHFT(ACRVIDIM) \
    ((((unsigned long)(ACRVIDIM)) & ACRVIDIM_CHROMA_SHFT_MASK) >> ACRVIDIM_CHROMA_SHFT_SHIFT)
#define ACRVIDIM_SET_CHROMA_SHFT(ACRVIDIM, CHROMA_SHFT) { \
    FDL_ASSERT(!((CHROMA_SHFT) & ~((1 << ACRVIDIM_CHROMA_SHFT_SIZE)-1))); \
    ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_CHROMA_SHFT_MASK) | (((unsigned long)(CHROMA_SHFT)) << ACRVIDIM_CHROMA_SHFT_SHIFT);\
}
#define ACRVIDIM_LUMA_SHFT_SIZE 3
#define ACRVIDIM_LUMA_SHFT_SHIFT    3
#define ACRVIDIM_LUMA_SHFT_MASK 0x00000038
#define ACRVIDIM_GET_LUMA_SHFT(ACRVIDIM) \
    ((((unsigned long)(ACRVIDIM)) & ACRVIDIM_LUMA_SHFT_MASK) >> ACRVIDIM_LUMA_SHFT_SHIFT)
#define ACRVIDIM_SET_LUMA_SHFT(ACRVIDIM, LUMA_SHFT) { \
    FDL_ASSERT(!((LUMA_SHFT) & ~((1 << ACRVIDIM_LUMA_SHFT_SIZE)-1))); \
    ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_LUMA_SHFT_MASK) | (((unsigned long)(LUMA_SHFT)) << ACRVIDIM_LUMA_SHFT_SHIFT);\
}
#define ACRVIDIM_DIM_EN_SIZE    1
#define ACRVIDIM_DIM_EN_SHIFT   6
#define ACRVIDIM_DIM_EN_MASK    0x00000040
#define ACRVIDIM_GET_DIM_EN(ACRVIDIM) \
    ((((unsigned long)(ACRVIDIM)) & ACRVIDIM_DIM_EN_MASK) >> ACRVIDIM_DIM_EN_SHIFT)
#define ACRVIDIM_SET_DIM_EN(ACRVIDIM, DIM_EN) { \
    FDL_ASSERT(!((DIM_EN) & ~((1 << ACRVIDIM_DIM_EN_SIZE)-1))); \
    ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_DIM_EN_MASK) | (((unsigned long)(DIM_EN)) << ACRVIDIM_DIM_EN_SHIFT);\
}
#define ACRVIDIM_FORCE_DIM_SIZE 1
#define ACRVIDIM_FORCE_DIM_SHIFT    7
#define ACRVIDIM_FORCE_DIM_MASK 0x00000080
#define ACRVIDIM_GET_FORCE_DIM(ACRVIDIM) \
    ((((unsigned long)(ACRVIDIM)) & ACRVIDIM_FORCE_DIM_MASK) >> ACRVIDIM_FORCE_DIM_SHIFT)
#define ACRVIDIM_SET_FORCE_DIM(ACRVIDIM, FORCE_DIM) { \
    FDL_ASSERT(!((FORCE_DIM) & ~((1 << ACRVIDIM_FORCE_DIM_SIZE)-1))); \
    ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_FORCE_DIM_MASK) | (((unsigned long)(FORCE_DIM)) << ACRVIDIM_FORCE_DIM_SHIFT);\
}
#define ACRVIDIM_PAD0_SIZE  24
#define ACRVIDIM_PAD0_SHIFT 8
#define ACRVIDIM_PAD0_MASK  0xffffff00
#define ACRVIDIM_GET_PAD0(ACRVIDIM) \
    ((((unsigned long)(ACRVIDIM)) & ACRVIDIM_PAD0_MASK) >> ACRVIDIM_PAD0_SHIFT)
#define ACRVIDIM_SET_PAD0(ACRVIDIM, pad0) { \
    FDL_ASSERT(!((pad0) & ~((1 << ACRVIDIM_PAD0_SIZE)-1))); \
    ACRVIDIM = (((unsigned long)(ACRVIDIM)) & ~ACRVIDIM_PAD0_MASK) | (((unsigned long)(pad0)) << ACRVIDIM_PAD0_SHIFT);\
}
#define ACRVIDIM_TOTAL_SIZE 32
#define ACRVIDIM(CHROMA_SHFT, LUMA_SHFT, DIM_EN, FORCE_DIM) \
    ((((unsigned long)(CHROMA_SHFT)) << ACRVIDIM_CHROMA_SHFT_SHIFT) | \
     (((unsigned long)(LUMA_SHFT)) << ACRVIDIM_LUMA_SHFT_SHIFT) | \
     (((unsigned long)(DIM_EN)) << ACRVIDIM_DIM_EN_SHIFT) | \
     (((unsigned long)(FORCE_DIM)) << ACRVIDIM_FORCE_DIM_SHIFT))


/*
 *  ACRSIFRMCNT struct
 */
#define ACRSIFRMCNT_COUNT_SIZE  16
#define ACRSIFRMCNT_COUNT_SHIFT 0
#define ACRSIFRMCNT_COUNT_MASK  0x0000ffff
#define ACRSIFRMCNT_GET_COUNT(ACRSIFRMCNT) \
    ((((unsigned long)(ACRSIFRMCNT)) & ACRSIFRMCNT_COUNT_MASK) >> ACRSIFRMCNT_COUNT_SHIFT)
#define ACRSIFRMCNT_SET_COUNT(ACRSIFRMCNT, COUNT) { \
    FDL_ASSERT(!((COUNT) & ~((1 << ACRSIFRMCNT_COUNT_SIZE)-1))); \
    ACRSIFRMCNT = (((unsigned long)(ACRSIFRMCNT)) & ~ACRSIFRMCNT_COUNT_MASK) | (((unsigned long)(COUNT)) << ACRSIFRMCNT_COUNT_SHIFT);\
}
#define ACRSIFRMCNT_RF_IDLE_SIZE    1
#define ACRSIFRMCNT_RF_IDLE_SHIFT   16
#define ACRSIFRMCNT_RF_IDLE_MASK    0x00010000
#define ACRSIFRMCNT_GET_RF_IDLE(ACRSIFRMCNT) \
    ((((unsigned long)(ACRSIFRMCNT)) & ACRSIFRMCNT_RF_IDLE_MASK) >> ACRSIFRMCNT_RF_IDLE_SHIFT)
#define ACRSIFRMCNT_SET_RF_IDLE(ACRSIFRMCNT, RF_IDLE) { \
    FDL_ASSERT(!((RF_IDLE) & ~((1 << ACRSIFRMCNT_RF_IDLE_SIZE)-1))); \
    ACRSIFRMCNT = (((unsigned long)(ACRSIFRMCNT)) & ~ACRSIFRMCNT_RF_IDLE_MASK) | (((unsigned long)(RF_IDLE)) << ACRSIFRMCNT_RF_IDLE_SHIFT);\
}
#define ACRSIFRMCNT_PAD0_SIZE   15
#define ACRSIFRMCNT_PAD0_SHIFT  17
#define ACRSIFRMCNT_PAD0_MASK   0xfffe0000
#define ACRSIFRMCNT_GET_PAD0(ACRSIFRMCNT) \
    ((((unsigned long)(ACRSIFRMCNT)) & ACRSIFRMCNT_PAD0_MASK) >> ACRSIFRMCNT_PAD0_SHIFT)
#define ACRSIFRMCNT_SET_PAD0(ACRSIFRMCNT, pad0) { \
    FDL_ASSERT(!((pad0) & ~((1 << ACRSIFRMCNT_PAD0_SIZE)-1))); \
    ACRSIFRMCNT = (((unsigned long)(ACRSIFRMCNT)) & ~ACRSIFRMCNT_PAD0_MASK) | (((unsigned long)(pad0)) << ACRSIFRMCNT_PAD0_SHIFT);\
}
#define ACRSIFRMCNT_TOTAL_SIZE  32
#define ACRSIFRMCNT(COUNT, RF_IDLE) \
    ((((unsigned long)(COUNT)) << ACRSIFRMCNT_COUNT_SHIFT) | \
     (((unsigned long)(RF_IDLE)) << ACRSIFRMCNT_RF_IDLE_SHIFT))



#endif // __FDL_AHB_FDL_DEFS_H__

#endif  // __ACR_PPC_REG_H__
